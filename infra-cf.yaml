#Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: CFN template to create FSX Infrastructure
Parameters:
  ImageID:
    Type: String
  RootVolumeSize:
    Description: Total Storage of Root/C Drive
    Type: Number
    Default: 80
  TVolumeSize:
    Description: Total Storage of T Drive
    Type: Number
    Default: 60
  CDriveIOPS:
    Description: Number of IOPs that need to be allocated to C Drive
    Type: Number
    Default: 3000
  TDriveIOPS:
    Description: IOPS that need to be allocated to T Drive
    Type: Number
    Default: 3000
  TimeZoneCountry:
    Description: Name of the country whose TimeZone need to be considered
    Type: String
    Default: Canada
  TimeZone:
    Description: Time Zone that need to be assigned to EC2 instance
    Type: String
    Default: Eastern Standard Time
  VolumeType:
    Description: Volume type that need to be created
    Type: String
    Default: gp3
    AllowedValues:
      - gp3

  Node1SecurityGroupName:
    Description: Name of the Security Group for EC2 Primary Node 1
    Type: String
    Default: sample-sqlnode1-primary-sg
  Node2SecurityGroupName:
    Description: Name of the Security Group for EC2 Secondary Node 2
    Type: String
    Default: sample-sqlnode2-secondary-sg

  FSxWindowsFileSystemName:
    Description: Name of the FSX Drive
    Type: String
    Default: SqlFSxFileSystem
  OUSecretName:
    Description: Secret Name containing Domain and OU details
    Type: String
    Default: sample-secret-name
  FSXSecurityGroupName:
    Description: Name of the Security Group for FSX Drive
    Type: String
    Default: sample-fsx-sg

  WorkloadInstanceType:
    Default: c6a.xlarge
    Description: Type of EC2 instance for the workload instances.
    Type: String
  SqlFSxFCIName:
    AllowedPattern: "[a-zA-Z0-9\\-]+"
    Default: SqlFCI
    Description: Name of the failover cluster instance (FCI). You can use up to 15 characters.
    MaxLength: '15'
    MinLength: '1'
    Type: String
  SqlFSxServerNetBIOSName1:
    AllowedPattern: "[a-zA-Z0-9\\-]+"
    Default: SqlFSx1
    Description: NetBIOS name of the primary instance. You can use up to 15 characters. Example- AWSSQL01A
    MaxLength: '15'
    MinLength: '1'
    Type: String
  SqlFSxServerNetBIOSName2:
    AllowedPattern: "[a-zA-Z0-9\\-]+"
    Default: SqlFSx2
    Description: NetBIOS name of the secondary instance. You can use up to 15 characters. Example- AWSSQL01B
    MaxLength: '15'
    MinLength: '1'
    Type: String
  PrivateSubnet1:
   Type: 'AWS::EC2::Subnet::Id'
   Description: Private Subnet1 Id for EC2 Nodes
  PrivateSubnet2:
   Type: 'AWS::EC2::Subnet::Id'
   Description: Private Subnet2 Id for EC2 Nodes
  ActiveDirectoryId:
    Description: Id of Active Directory
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  FileShareVolumeSize:
    Default: 32
    Description: Capacity (GB) of the volume used to store SQL Server files. Minimum value is 32 and maximum 65536.
    Type: Number
    MinValue: 32
    MaxValue: 65536
  FileShareThroughputCapacity:
    Default: 8
    Description: File-share throughput capacity (MB/s) in 2 to the nth power increments, where 3 ? n ? 11, i.e. between 2^3 and 2^11.
    Type: Number
    AllowedValues:
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      - 2048
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  ADDnsIpAddresses1:
    Description: First DNS Address of AWS Active Direcrtory
    Type: String
  ADDnsIpAddresses2:
    Description: Second DNS Address of AWS Active Direcrtory
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS EC2 and Network Configurations
        Parameters:
          - Node1SecurityGroupName
          - Node2SecurityGroupName
          - OUSecretName
          - WorkloadInstanceType
          - SqlFSxFCIName
          - SqlFSxServerNetBIOSName1
          - SqlFSxServerNetBIOSName2
          - PrivateSubnet1
          - PrivateSubnet2
          - VPC
          - KeyPairName
          - TimeZoneCountry
          - TimeZone
      - Label:
          default: EC2 Drives, Domain and FSX Configurations
        Parameters:
          - FileShareVolumeSize
          - FileShareThroughputCapacity
          - FSxWindowsFileSystemName
          - FSXSecurityGroupName
          - RootVolumeSize
          - TVolumeSize
          - CDriveIOPS
          - TDriveIOPS
          - ADDnsIpAddresses1
          - ADDnsIpAddresses2
    ParameterLabels:
      Node1SecurityGroupName:
        default: Primary Node Security Group
      Node2SecurityGroupName:
        default: Secondary Node Security Group
      OUSecretName:
        default: Secret Name
      WorkloadInstanceType:
        default: Instance Type
      SqlFSxFCIName:
        default: Name of the failover cluster instance (FCI)
      SqlFSxServerNetBIOSName1:
        default: Primary Node Name
      SqlFSxServerNetBIOSName2:
        default: Secondary Node Name
      PrivateSubnet1:
        default: Private subnet 1
      PrivateSubnet2:
        default: Private Subnet 2
      VPC:
        default: VPC ID
      KeyPairName:
        default: EC2 Key Pair Name
      FileShareVolumeSize:
        default: Size of FSx Volume
      FileShareThroughputCapacity:
        default: FSx Throughput Capacity
      FSxWindowsFileSystemName:
        default: FSx Windows File System Name
      FSXSecurityGroupName:
        default: FSx Security Group Name
      RootVolumeSize:
        default: C drive size
      TVolumeSize:
        default: T drive size
      TimeZoneCountry:
        default: TimeZone Country
      TimeZone:
        default: Time Zone of EC2 Instance
      CDriveIOPS:
        default: IOPS for C drive
      TDriveIOPS:
        default: IOPS for T Drive
      ADDnsIpAddresses1:
        default: First DNS IP address of Active Directory
      ADDnsIpAddresses2:
        default: Second DNS IP address of Active Directory

Resources:
  Node1SecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: Allow access to the Node 1 instances
       GroupName: !Ref Node1SecurityGroupName
       VpcId:
         Ref: VPC
       Tags:
         - Key: Name
           Value: !Ref Node1SecurityGroupName
  Node2SecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: Allow access to the Node 2 instances
       GroupName: !Ref Node2SecurityGroupName
       VpcId:
         Ref: VPC
       SecurityGroupIngress:
       - IpProtocol: -1
         SourceSecurityGroupId:
            Ref: Node1SecurityGroup
       Tags:
         - Key: Name
           Value: !Ref Node2SecurityGroupName
  Node1SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: Node2SecurityGroup
      Description: Ingress Rule for Node 1 SG
      GroupId:
        Ref: Node1SecurityGroup
      IpProtocol: -1

  Node1SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the instance to send traffic to internet without any issues
      CidrIp: 0.0.0.0/0
      GroupId:
        Ref: Node1SecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
  Node2SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the instance to send traffic to internet without any issues
      CidrIp: 0.0.0.0/0
      GroupId:
        Ref: Node2SecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
  FSXSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the FSX to send traffic to internet without any issues
      CidrIp: 0.0.0.0/0
      GroupId:
        Ref: FSXSecurityGroup
      IpProtocol: "-1"
      FromPort: 0
      ToPort: 0
  FSXSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
       GroupDescription: Allow access from client computer to fsx
       GroupName: !Ref FSXSecurityGroupName
       VpcId:
         Ref: VPC
       Tags:
         - Key: Name
           Value: !Ref FSXSecurityGroupName
       SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 53
         ToPort: 53
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 5985
         ToPort: 5985
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 88
         ToPort: 88
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 135
         ToPort: 135
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 389
         ToPort: 389
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 445
         ToPort: 445
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 464
         ToPort: 464
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 636
         ToPort: 636
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 3268
         ToPort: 3268
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 3269
         ToPort: 3269
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 9389
         ToPort: 9389
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 49152
         ToPort: 65535
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: tcp
         FromPort: 53
         ToPort: 53
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 5985
         ToPort: 5985
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 88
         ToPort: 88
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 135
         ToPort: 135
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 389
         ToPort: 389
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 445
         ToPort: 445
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 464
         ToPort: 464
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 636
         ToPort: 636
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 3268
         ToPort: 3268
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 3269
         ToPort: 3269
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 9389
         ToPort: 9389
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: tcp
         FromPort: 49152
         ToPort: 65535
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: udp
         FromPort: 53
         ToPort: 53
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: udp
         FromPort: 88
         ToPort: 88
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: udp
         FromPort: 123
         ToPort: 123
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: udp
         FromPort: 389
         ToPort: 389
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: udp
         FromPort: 464
         ToPort: 464
         SourceSecurityGroupId:
           Ref: Node1SecurityGroup
       - IpProtocol: udp
         FromPort: 53
         ToPort: 53
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: udp
         FromPort: 88
         ToPort: 88
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: udp
         FromPort: 123
         ToPort: 123
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: udp
         FromPort: 389
         ToPort: 389
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
       - IpProtocol: udp
         FromPort: 464
         ToPort: 464
         SourceSecurityGroupId:
           Ref: Node2SecurityGroup
  SqlFSxRole:
      Type: AWS::IAM::Role
      Properties:
        Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OUSecretName}-*"
          PolicyName: failover-cluster-ec2-nodes-policy
        ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess"
        Path: "/"
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Principal:
              Service:
              - ec2.amazonaws.com
            Effect: Allow
          Version: '2012-10-17'
  SqlFSxProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
        - Ref: SqlFSxRole
        Path: "/"
  FSxWindowsFileSystem:
      Type: 'AWS::FSx::FileSystem'
      DependsOn:
       - FSXSecurityGroupEgress
      Properties:
        FileSystemType: WINDOWS
        StorageCapacity:
          Ref: FileShareVolumeSize
        StorageType: SSD
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
        SecurityGroupIds:
          - Ref: FSXSecurityGroup
        Tags:
          - Key: Name
            Value:
              Ref: FSxWindowsFileSystemName
        WindowsConfiguration:
          ThroughputCapacity:
            Ref: FileShareThroughputCapacity
          WeeklyMaintenanceStartTime: '4:16:30'
          DailyAutomaticBackupStartTime: '01:00'
          AutomaticBackupRetentionDays: 7
          CopyTagsToBackups: false
          DeploymentType: MULTI_AZ_1
          PreferredSubnetId:
            Ref: PrivateSubnet1
          ActiveDirectoryId: !Ref ActiveDirectoryId
  SqlFSxInstance1:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !Ref ImageID
        IamInstanceProfile:
          Ref: SqlFSxProfile
        InstanceType:
          Ref: WorkloadInstanceType
        NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SecondaryPrivateIpAddressCount: 3
          SubnetId:
            Ref: PrivateSubnet1
          GroupSet:
            - Ref: Node1SecurityGroup
        Tags:
        - Key: Name
          Value:
            Ref: SqlFSxServerNetBIOSName1
        - Key: FCIName
          Value:
            Ref: SqlFSxFCIName
        - Key: FCIRole
          Value: Primary
        - Key: ADJoined
          Value: FSXADD
        - Key: OUSecretName
          Value:
            Ref: OUSecretName
        - Key: TimeZoneCountry
          Value: !Ref TimeZoneCountry
        - Key: TimeZone
          Value: !Ref TimeZone
        - Key: FirstDNSAddressAD
          Value: !Ref ADDnsIpAddresses1
        - Key: SecondDNSAddressAD
          Value: !Ref ADDnsIpAddresses2
        BlockDeviceMappings:
        - DeviceName: xvdf
          Ebs:
            VolumeSize: !Ref TVolumeSize
            VolumeType: !Ref VolumeType
            Iops: !Ref TDriveIOPS
            DeleteOnTermination: false
            Encrypted: true
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: !Ref VolumeType
            Iops: !Ref CDriveIOPS
            DeleteOnTermination: false
            Encrypted: true
        KeyName:
          Ref: KeyPairName
        UserData:
          Fn::Base64:
            !Sub |
            <powershell>
             $InstanceId = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id").ToString()
             $AvailabilityZone = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/placement/availability-zone").ToString()
             $Region = $AvailabilityZone.Substring(0, $AvailabilityZone.Length - 1)
             $Tags = Get-EC2Tag -Filters @{Name  = "resource-id";Value = $InstanceId} -Region $Region
             $TimeZoneFinal = ($Tags | Where-Object -FilterScript {$_.Key -eq "TimeZone"}).Value
             if($TimeZoneFinal -eq "" -or $TimeZoneFinal -eq $null){
               $TimeZoneFinal = "${TimeZone}"
             }
             $TimeZoneCountryFinal = ($Tags | Where-Object -FilterScript {$_.Key -eq "TimeZoneCountry"}).Value
             if($TimeZoneCountryFinal -eq "" -or $TimeZoneCountryFinal -eq $null){
               $TimeZoneCountryFinal = "${TimeZoneCountry}"
             }
             Install-WindowsFeature -name Web-Server -IncludeManagementTools
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sCountry -Value $TimeZoneCountryFinal
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sShortDate -Value "yyyy-MM-dd"
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sLongDate -Value "dd MMM yyyy\"
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sDecimal -Value "."
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sList -Value ","
             cmd /c %windir%\\system32\\tzutil.exe /s $TimeZoneFinal

             function Convert-SCSITargetIdToDeviceName {
               param([int]$SCSITargetId)
               If ($SCSITargetId -eq 0) {
                 return "sda1"
               }
               $deviceName = "xvd"
               If ($SCSITargetId -gt 25) {
                 $deviceName += [char](0x60 + [int]($SCSITargetId / 26))
               }
               $deviceName += [char](0x61 + $SCSITargetId % 26)
               return $deviceName
             }
             [string[]]$array1 = @()
             [string[]]$array2 = @()
             [string[]]$array3 = @()
             [string[]]$array4 = @()
             Get-WmiObject Win32_Volume | Select-Object Name, DeviceID |
             ForEach-Object {
               $array1 += $_.Name
               $array2 += $_.DeviceID
             }
             $i = 0
             While ($i -ne ($array2.Count)) {
               $array3 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).SerialNumber) -replace "_[^ ]*$" -replace "vol", "vol-"
               $array4 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).FriendlyName)
               $i ++
             }

             [array[]]$array = $array1, $array2, $array3, $array4

             Try {
               $InstanceId = Get-EC2InstanceMetadata -Category "InstanceId"
               $Region = Get-EC2InstanceMetadata -Category "Region" | Select-Object -ExpandProperty SystemName
             }
             Catch {
               Write-Host "Could not access the instance Metadata using AWS Get-EC2InstanceMetadata CMDLet.
             Verify you have AWSPowershell SDK version '3.1.73.0' or greater
             installed and Metadata is enabled for this instance."
             -ForegroundColor Yellow
             }
             Try {
               $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings
               $VirtualDeviceMap = (Get-EC2InstanceMetadata -Category "BlockDeviceMapping").GetEnumerator() | Where-Object { $_.Key -ne "ami" }
             }
             Catch {
               Write-Host "Could not access the AWS API, therefore, VolumeId is not available.
             Verify that you provided your access keys or assigned an IAM role
             with adequate permissions." -ForegroundColor Yellow
             }

             $DriveDetails=Get-disk | ForEach-Object {
               $DriveLetter = $null
               $VolumeName = $null
               $VirtualDevice = $null
               $DeviceName = $_.FriendlyName
               $DiskDrive = $_
               $Disk = $_.Number
               $Partitions = $_.NumberOfPartitions
               $EbsVolumeID = $_.SerialNumber -replace "_[^ ]*$" -replace "vol", "vol-"
               if ($Partitions -ge 1) {
                 $PartitionsData = Get-Partition -DiskId $_.Path
                 $DriveLetter = $PartitionsData.DriveLetter | Where-object { $_ -notin @("", $null) }
                 $VolumeName = (Get-PSDrive | Where-Object { $_.Name -in @($DriveLetter) }).Description | Where-object { $_ -notin @("", $null) }
               }
               If ($DiskDrive.path -like "*PROD_PVDISK*") {
                 $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq ("\\.\PHYSICALDRIVE" + $DiskDrive.Number) }).SCSITargetId)
                 $BlockDeviceName = "/dev/" + $BlockDeviceName
                 $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like "*" + $_.DeviceName + "*" }
                 $EbsVolumeID = $BlockDevice.Ebs.VolumeId
                 $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1
               }
               ElseIf ($DiskDrive.path -like "*PROD_AMAZON_EC2_NVME*") {
                 $BlockDeviceName = (Get-EC2InstanceMetadata -Category "BlockDeviceMapping").ephemeral((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq ("\\.\PHYSICALDRIVE" + $DiskDrive.Number) }).SCSIPort - 2)
                 $BlockDevice = $null
                 $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1
               }
               ElseIf ($DiskDrive.path -like "*PROD_AMAZON*") {
                 if ($DriveLetter -match '[^a-zA-Z0-9]') {
                   $i = 0
                   While ($i -ne ($array3.Count)) {
                     if ($array[2][$i] -eq $EbsVolumeID) {
                       $DriveLetter = $array[0][$i]
                       $DeviceName = $array[3][$i]
                     }
                     $i ++
                   }
                 }
                 $BlockDevice = ""
                 $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName
               }
               ElseIf ($DiskDrive.path -like "*NETAPP*") {
                 if ($DriveLetter -match '[^a-zA-Z0-9]') {
                   $i = 0
                   While ($i -ne ($array3.Count)) {
                     if ($array[2][$i] -eq $EbsVolumeID) {
                       $DriveLetter = $array[0][$i]
                       $DeviceName = $array[3][$i]
                     }
                     $i ++
                   }
                 }
                 $EbsVolumeID = "FSxN Volume"
                 $BlockDevice = ""
                 $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName
               }
               Else {
                 $BlockDeviceName = $null
                 $BlockDevice = $null
               }
               New-Object PSObject -Property @{
                 Disk          = $Disk;
                 Partitions    = $Partitions;
                 DriveLetter   = If ($DriveLetter -eq $null) { "N/A" } Else { $DriveLetter };
                 EbsVolumeId   = If ($EbsVolumeID -eq $null) { "N/A" } Else { $EbsVolumeID };
                 Device        = If ($BlockDeviceName -eq $null) { "N/A" } Else { $BlockDeviceName };
                 VirtualDevice = If ($VirtualDevice -eq $null) { "N/A" } Else { $VirtualDevice };
                 VolumeName    = If ($VolumeName -eq $null) { "N/A" } Else { $VolumeName };
                 DeviceName    = If ($DeviceName -eq $null) { "N/A" } Else { $DeviceName };
               }
             } | Sort-Object Disk

             foreach ($element in $myList) {
             $disk = Get-WmiObject -Class win32_volume -Filter "DriveLetter =
             '$driveletter'"
             Set-WmiInstance -input $disk -Arguments @{ Label=$newlabel}
             }

             foreach ($item in $DriveDetails)
             {
                  write-host ("{0} {1}" -f $item.DriveLetter, $item.Device)
                  if ($item.Device -match "xvdf"){
                     if ($item.DriveLetter -match "T"){
                         Write-Host "Drive Letter T Looks Good"
                     }else{
                         Write-Host ("Drive Letter {0} Need to be Changed to {1}" -f $item.DriveLetter, "T")
                         $Drive = Get-CimInstance -ClassName Win32_Volume -Filter ("DriveLetter = '{0}:'" -f $item.DriveLetter)
                         $Drive | Set-CimInstance -Property @{DriveLetter ='T:'}
                     }
                  }
               else{
                         Write-Host "Other Drives"
                 }
             }
             </powershell>
  SqlFSxInstance2:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !Ref ImageID
        IamInstanceProfile:
          Ref: SqlFSxProfile
        InstanceType:
          Ref: WorkloadInstanceType
        NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SecondaryPrivateIpAddressCount: 3
          SubnetId:
            Ref: PrivateSubnet2
          GroupSet:
            - Ref: Node2SecurityGroup
        Tags:
        - Key: Name
          Value:
            Ref: SqlFSxServerNetBIOSName2
        - Key: FCIName
          Value:
            Ref: SqlFSxFCIName
        - Key: FCIRole
          Value: Secondary
        - Key: ADJoined
          Value: FSXADD

        - Key: OUSecretName
          Value:
            Ref: OUSecretName
        - Key: TimeZoneCountry
          Value: !Ref TimeZoneCountry
        - Key: TimeZone
          Value: !Ref TimeZone
        - Key: FirstDNSAddressAD
          Value: !Ref ADDnsIpAddresses1
        - Key: SecondDNSAddressAD
          Value: !Ref ADDnsIpAddresses2

        BlockDeviceMappings:
        - DeviceName: xvdf
          Ebs:
            VolumeSize: !Ref TVolumeSize
            VolumeType: !Ref VolumeType
            DeleteOnTermination: false
            Encrypted: true
            Iops: !Ref TDriveIOPS
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: !Ref VolumeType
            DeleteOnTermination: false
            Iops: !Ref CDriveIOPS
            Encrypted: true
        KeyName:
          Ref: KeyPairName
        UserData:
          Fn::Base64:
            !Sub |
            <powershell>
             $InstanceId = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id").ToString()
             $AvailabilityZone = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/placement/availability-zone").ToString()
             $Region = $AvailabilityZone.Substring(0, $AvailabilityZone.Length - 1)
             $Tags = Get-EC2Tag -Filters @{Name  = "resource-id";Value = $InstanceId} -Region $Region
             $TimeZoneFinal = ($Tags | Where-Object -FilterScript {$_.Key -eq "TimeZone"}).Value
             if($TimeZoneFinal -eq "" -or $TimeZoneFinal -eq $null){
               $TimeZoneFinal = "${TimeZone}"
             }
             $TimeZoneCountryFinal = ($Tags | Where-Object -FilterScript {$_.Key -eq "TimeZoneCountry"}).Value
             if($TimeZoneCountryFinal -eq "" -or $TimeZoneCountryFinal -eq $null){
               $TimeZoneCountryFinal = "${TimeZoneCountry}"
             }
             Install-WindowsFeature -name Web-Server -IncludeManagementTools
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sCountry -Value $TimeZoneCountryFinal
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sShortDate -Value "yyyy-MM-dd"
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sLongDate -Value "dd MMM yyyy\"
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sDecimal -Value "."
             Set-ItemProperty -Path "HKCU:\\Control Panel\\International" -Name sList -Value ","
             cmd /c %windir%\\system32\\tzutil.exe /s $TimeZoneFinal

             function Convert-SCSITargetIdToDeviceName {
               param([int]$SCSITargetId)
               If ($SCSITargetId -eq 0) {
                 return "sda1"
               }
               $deviceName = "xvd"
               If ($SCSITargetId -gt 25) {
                 $deviceName += [char](0x60 + [int]($SCSITargetId / 26))
               }
               $deviceName += [char](0x61 + $SCSITargetId % 26)
               return $deviceName
             }
             [string[]]$array1 = @()
             [string[]]$array2 = @()
             [string[]]$array3 = @()
             [string[]]$array4 = @()
             Get-WmiObject Win32_Volume | Select-Object Name, DeviceID |
             ForEach-Object {
               $array1 += $_.Name
               $array2 += $_.DeviceID
             }
             $i = 0
             While ($i -ne ($array2.Count)) {
               $array3 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).SerialNumber) -replace "_[^ ]*$" -replace "vol", "vol-"
               $array4 += ((Get-Volume -Path $array2[$i] | Get-Partition | Get-Disk).FriendlyName)
               $i ++
             }

             [array[]]$array = $array1, $array2, $array3, $array4

             Try {
               $InstanceId = Get-EC2InstanceMetadata -Category "InstanceId"
               $Region = Get-EC2InstanceMetadata -Category "Region" | Select-Object -ExpandProperty SystemName
             }
             Catch {
               Write-Host "Could not access the instance Metadata using AWS Get-EC2InstanceMetadata CMDLet.
             Verify you have AWSPowershell SDK version '3.1.73.0' or greater
             installed and Metadata is enabled for this instance."
             -ForegroundColor Yellow
             }
             Try {
               $BlockDeviceMappings = (Get-EC2Instance -Region $Region -Instance $InstanceId).Instances.BlockDeviceMappings
               $VirtualDeviceMap = (Get-EC2InstanceMetadata -Category "BlockDeviceMapping").GetEnumerator() | Where-Object { $_.Key -ne "ami" }
             }
             Catch {
               Write-Host "Could not access the AWS API, therefore, VolumeId is not available.
             Verify that you provided your access keys or assigned an IAM role
             with adequate permissions." -ForegroundColor Yellow
             }

             $DriveDetails=Get-disk | ForEach-Object {
               $DriveLetter = $null
               $VolumeName = $null
               $VirtualDevice = $null
               $DeviceName = $_.FriendlyName
               $DiskDrive = $_
               $Disk = $_.Number
               $Partitions = $_.NumberOfPartitions
               $EbsVolumeID = $_.SerialNumber -replace "_[^ ]*$" -replace "vol", "vol-"
               if ($Partitions -ge 1) {
                 $PartitionsData = Get-Partition -DiskId $_.Path
                 $DriveLetter = $PartitionsData.DriveLetter | Where-object { $_ -notin @("", $null) }
                 $VolumeName = (Get-PSDrive | Where-Object { $_.Name -in @($DriveLetter) }).Description | Where-object { $_ -notin @("", $null) }
               }
               If ($DiskDrive.path -like "*PROD_PVDISK*") {
                 $BlockDeviceName = Convert-SCSITargetIdToDeviceName((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq ("\\.\PHYSICALDRIVE" + $DiskDrive.Number) }).SCSITargetId)
                 $BlockDeviceName = "/dev/" + $BlockDeviceName
                 $BlockDevice = $BlockDeviceMappings | Where-Object { $BlockDeviceName -like "*" + $_.DeviceName + "*" }
                 $EbsVolumeID = $BlockDevice.Ebs.VolumeId
                 $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1
               }
               ElseIf ($DiskDrive.path -like "*PROD_AMAZON_EC2_NVME*") {
                 $BlockDeviceName = (Get-EC2InstanceMetadata -Category "BlockDeviceMapping").ephemeral((Get-WmiObject -Class Win32_Diskdrive | Where-Object { $_.DeviceID -eq ("\\.\PHYSICALDRIVE" + $DiskDrive.Number) }).SCSIPort - 2)
                 $BlockDevice = $null
                 $VirtualDevice = ($VirtualDeviceMap.GetEnumerator() | Where-Object { $_.Value -eq $BlockDeviceName }).Key | Select-Object -First 1
               }
               ElseIf ($DiskDrive.path -like "*PROD_AMAZON*") {
                 if ($DriveLetter -match '[^a-zA-Z0-9]') {
                   $i = 0
                   While ($i -ne ($array3.Count)) {
                     if ($array[2][$i] -eq $EbsVolumeID) {
                       $DriveLetter = $array[0][$i]
                       $DeviceName = $array[3][$i]
                     }
                     $i ++
                   }
                 }
                 $BlockDevice = ""
                 $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName
               }
               ElseIf ($DiskDrive.path -like "*NETAPP*") {
                 if ($DriveLetter -match '[^a-zA-Z0-9]') {
                   $i = 0
                   While ($i -ne ($array3.Count)) {
                     if ($array[2][$i] -eq $EbsVolumeID) {
                       $DriveLetter = $array[0][$i]
                       $DeviceName = $array[3][$i]
                     }
                     $i ++
                   }
                 }
                 $EbsVolumeID = "FSxN Volume"
                 $BlockDevice = ""
                 $BlockDeviceName = ($BlockDeviceMappings | Where-Object { $_.ebs.VolumeId -eq $EbsVolumeID }).DeviceName
               }
               Else {
                 $BlockDeviceName = $null
                 $BlockDevice = $null
               }
               New-Object PSObject -Property @{
                 Disk          = $Disk;
                 Partitions    = $Partitions;
                 DriveLetter   = If ($DriveLetter -eq $null) { "N/A" } Else { $DriveLetter };
                 EbsVolumeId   = If ($EbsVolumeID -eq $null) { "N/A" } Else { $EbsVolumeID };
                 Device        = If ($BlockDeviceName -eq $null) { "N/A" } Else { $BlockDeviceName };
                 VirtualDevice = If ($VirtualDevice -eq $null) { "N/A" } Else { $VirtualDevice };
                 VolumeName    = If ($VolumeName -eq $null) { "N/A" } Else { $VolumeName };
                 DeviceName    = If ($DeviceName -eq $null) { "N/A" } Else { $DeviceName };
               }
             } | Sort-Object Disk

             foreach ($element in $myList) {
             $disk = Get-WmiObject -Class win32_volume -Filter "DriveLetter =
             '$driveletter'"
             Set-WmiInstance -input $disk -Arguments @{ Label=$newlabel}
             }

             foreach ($item in $DriveDetails)
             {
                  write-host ("{0} {1}" -f $item.DriveLetter, $item.Device)
                  if ($item.Device -match "xvdf"){
                     if ($item.DriveLetter -match "T"){
                         Write-Host "Drive Letter T Looks Good"
                     }else{
                         Write-Host ("Drive Letter {0} Need to be Changed to {1}" -f $item.DriveLetter, "T")
                         $Drive = Get-CimInstance -ClassName Win32_Volume -Filter ("DriveLetter = '{0}:'" -f $item.DriveLetter)
                         $Drive | Set-CimInstance -Property @{DriveLetter ='T:'}
                     }
                  }
               else{
                         Write-Host "Other Drives"
                 }
             }
             </powershell>
