#Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: Create parameters required for the AD domain join SSM Automation runbooks.
Parameters:
  StateUnJoinAssociationLoggingBucketName:
    Description: 'Specify a name for the logging bucket for association.'
    Type: String
  SSMAssociationADUnjoinName:
    Description: 'Specify a descriptive name for the association to automate AD domain unjoin. Valid characters are a-z, A-Z, 0-9, and _, -, and . only.'
    Type: String
  SSMAutomationDocumentName:
    Description: 'Automation runbook that will join or unjoin an EC2 Windows instance to Manged/Unmanaged Active Directory (AD). The name must be between 3 and 128 characters. Valid characters are a-z, A-Z, 0-9, and _, -, and . only. You can''t use the following strings as document name prefixes. These are reserved by AWS for use as document name prefixes: aws-,amazon, amzn.'
    Type: String
    AllowedPattern: ^[a-zA-Z0-9_\-.]{3,128}$
  EventBridgeName:
    Type: String
    Description: 'Specify Event Bridge Name'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Systems Manager Automation runbook and Parameter Store creation
        Parameters:
          - SSMAutomationDocumentName
          - StateUnJoinAssociationLoggingBucketName
          - SSMAssociationADUnjoinName
          - EventBridgeName
    ParameterLabels:
      StateUnJoinAssociationLoggingBucketName:
        default: UnJoin Association Logging Bucket Name
      SSMAssociationADUnjoinName:
        default: AD unjoin association name
      SSMAutomationDocumentName:
        default: Automation runbook name
      EventBridgeName:
        default: Event Bridge Name
Resources:
  SSMEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: !Ref EventBridgeName
      Description: Trigger the SSM Automation Document to Join AD upon Instance Launch
      State: ENABLED
      RoleArn: !GetAtt EventBridgeIAMrole.Arn
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - RunInstances
          requestParameters:
           tagSpecificationSet:
             items:
               resourceType:
                 - instance
               tags:
                 key:
                   - ADJoined
                 value:
                   - FSXADD
      Targets:
        - RoleArn: !GetAtt EventBridgeIAMrole.Arn
          Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMAutomationDocument}:$DEFAULT"
          Id: 'Id12345'
          InputTransformer:
            InputPathsMap:
              instance: $.detail.responseElements.instancesSet.items[0].instanceId
            InputTemplate: !Sub
              - |
                  {
                    "InstanceId":[<instance>],
                    "DomainJoinActivity": ["Join"],
                    "AutomationAssumeRole": ["${AutomationAssumeRoleArn}"]
                   }
              - AutomationAssumeRoleArn: !GetAtt AutomationExecutionRole.Arn

  EventBridgeIAMrole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: eb-role-trigger-ssm-doc-fsx
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'


  Eventbridgepolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EventBridgePolicyForSSMTriggerFSX
      Roles:
          - !Ref EventBridgeIAMrole
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ssm:StartAutomationExecution
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SSMAutomationDocument}:$DEFAULT"
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt AutomationExecutionRole.Arn
              Condition:
                StringLikeIfExists:
                  iam:PassedToService:
                    - ssm.amazonaws.com

  SSMAssociationIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Custom IAM Policy to allow SSM State Manager Associations to allow AD domain join/unjoin.
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EC2TagConditions
            Effect: Allow
            Action:
              - ec2:RebootInstances
              - ec2:StopInstances
            Resource: '*'
            Condition:
              StringLike:
                aws:ResourceTag/ADJoined:
                  - FSXADD
                  - FSXREMOVE
                  - Join-complete
                  - Unjoin-complete
                  - Failed
          - Sid: EC2SSMDescribe
            Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DescribeInstances
              - ec2:DescribeTags
              - ssm:DescribeInstanceInformation
              - ssm:List*
              - ssm:SendCommand
            Resource: '*'
          - Sid: SecretMangerreadOnly
            Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetRandomPassword
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecretVersionIds
            Resource: '*'
  AutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: automation-assume-role-to-run-ssmdoc-fsx
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref SSMAssociationIAMPolicy
# State Manager Association
  SSMAssociationunjoin:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: !Ref SSMAssociationADUnjoinName
      ApplyOnlyAtCronInterval: True
      ScheduleExpression: cron(0 0/12 * * ? *)
      ComplianceSeverity: CRITICAL
      DocumentVersion: $DEFAULT
      Name: !Ref SSMAutomationDocument
      Parameters:
        AutomationAssumeRole:
          - !GetAtt AutomationExecutionRole.Arn
        DomainJoinActivity:
          - Unjoin
      OutputLocation:
         S3Location:
           OutputS3BucketName: !Ref StateUnJoinAssociationLoggingBucket
      SyncCompliance: AUTO
      Targets:
      - Key: tag:ADJoined
        Values:
        - 'FSXREMOVE'
      AutomationTargetParameterName: InstanceId

  # S3 bucket to logging Association

  StateUnJoinAssociationLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    #UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref StateUnJoinAssociationLoggingBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  SSMAutomationDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      Name: !Ref 'SSMAutomationDocumentName'
      Content:
        schemaVersion: '0.3'
        description: |-
          This document will join or unjoin an EC2 Windows instance to an Active Directory domain.
        assumeRole: '{{AutomationAssumeRole}}'
        parameters:
          AutomationAssumeRole:
            default: ''
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            type: String
          InstanceId:
            description: (Required) The Instance running Windows Server.
            type: String
          DomainJoinActivity:
            allowedValues:
              - Join
              - Unjoin
              - ''
            default: ''
            description: '(Required) Select which AD domain activity to perform, join an AD domain or unjoin an AD domain.'
            type: String
        mainSteps:
          - name: sleep
            action: aws:sleep
            inputs:
                Duration: PT10M
          - name: assertInstanceIsWindows
            action: 'aws:assertAwsResourceProperty'
            description: ''
            inputs:
              Service: ec2
              PropertySelector: '$.Reservations[0].Instances[0].Platform'
              Api: DescribeInstances
              DesiredValues:
                - windows
              InstanceIds:
                - '{{InstanceId}}'
            timeoutSeconds: 10
            nextStep: chooseDomainJoinActivity

          - name: chooseDomainJoinActivity
            action: aws:branch
            timeoutSeconds: 60
            description: Determine the appropriate AD domain activity, join or unjoin.
            inputs:
              Choices:
                - NextStep: joinDomain
                  StringEquals: Join
                  Variable: '{{DomainJoinActivity}}'
                - NextStep: unjoinDomain
                  StringEquals: Unjoin
                  Variable: '{{DomainJoinActivity}}'
            isCritical: 'true'
            isEnd: false
          - name: joinDomain
            action: aws:runCommand
            description: Execute PowerShell locally on EC2 instance to join the AD domain.
            inputs:
              Parameters:
                commands: |-
                  If ((Get-CimInstance -ClassName 'Win32_ComputerSystem' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'PartOfDomain') -eq $false) {
                      Try {
                          $InstanceId = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id").ToString()
                          $AvailabilityZone = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/placement/availability-zone").ToString()
                          $Region = $AvailabilityZone.Substring(0, $AvailabilityZone.Length - 1)
                          $Tags = Get-EC2Tag -Filters @{Name  = "resource-id";Value = $InstanceId} -Region $Region
                          $OUSecretName = ($Tags | Where-Object -FilterScript {$_.Key -eq "OUSecretName"}).Value
                          $FirstDNSAddressAD = ($Tags | Where-Object -FilterScript {$_.Key -eq "FirstDNSAddressAD"}).Value
                          $SecondDNSAddressAD = ($Tags | Where-Object -FilterScript {$_.Key -eq "SecondDNSAddressAD"}).Value

                          $targetOU = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).TargetOU
                          $domainName = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).ADDomainName
                          $domainJoinUserName = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).ADDomainJoinUserName
                          $domain_pass_keypair = (Get-SECSecretValue -SecretId $OUSecretName).SecretString | ConvertFrom-Json
                          $domainJoinPassword = (ConvertTo-SecureString -String $($domain_pass_keypair."ADDomainJoinPassword") -AsPlainText -Force)


                      } Catch [System.Exception] {
                          Write-Output " Failed to get SSM Parameter(s) $_"
                      }
                      $domainCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName, $domainJoinPassword)

                      Try {
                          $adapter_name=(get-netadapter).Name
                          netsh interface ip set dns name="$adapter_name" static "$FirstDNSAddressAD"
                          netsh interface ip add dns name="$adapter_name" "$SecondDNSAddressAD" index=2
                          Write-Output "Attempting to join $env:COMPUTERNAME to Active Directory domain: $domainName and moving $env:COMPUTERNAME to the following OU: $targetOU."
                          Add-Computer -ComputerName $env:COMPUTERNAME -DomainName $domainName -Credential $domainCredential -OUPath $targetOU -Restart:$false -ErrorAction Stop
                          exit 3010
                      } Catch [System.Exception] {
                          Write-Output "Failed to add computer to the domain $_"
                          Exit 1
                      }
                  } Else {
                      Write-Output "$env:COMPUTERNAME is already part of the Active Directory domain $domainName."
                      Exit 0
                  }
              InstanceIds:
                - '{{InstanceId}}'
              DocumentName: AWS-RunPowerShellScript
            timeoutSeconds: 600
            nextStep: joinADEC2Tag
            isEnd: false
            onFailure: step:failADEC2Tag
          - name: joinADEC2Tag
            action: aws:createTags
            description: Add the ADJoined EC2 tag to reflect joining to AD domain.
            inputs:
              ResourceIds:
                - '{{InstanceId}}'
              ResourceType: EC2
              Tags:
                - Value: Join-complete
                  Key: ADJoined
            isEnd: true

#-----
          - name: unjoinDomain
            action: aws:runCommand
            description: Execute PowerShell locally on EC2 instance to unjoin from the AD domain.
            inputs:
              Parameters:
                commands: |-
                  If ((Get-CimInstance -ClassName 'Win32_ComputerSystem' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'PartOfDomain') -eq $true) {
                      Try {
                          $InstanceId = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id").ToString()
                          $AvailabilityZone = (Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/placement/availability-zone").ToString()
                          $Region = $AvailabilityZone.Substring(0, $AvailabilityZone.Length - 1)
                          $Tags = Get-EC2Tag -Filters @{Name  = "resource-id";Value = $InstanceId} -Region $Region
                          $OUSecretName = ($Tags | Where-Object -FilterScript {$_.Key -eq "OUSecretName"}).Value

                          ##$targetOU = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).TargetDBOU
                          $domainName = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).ADDomainName
                          $domainJoinUserName = ((Get-SECSecretValue -SecretId  $OUSecretName).SecretString | ConvertFrom-Json).ADDomainJoinUserName
                          $domain_pass_keypair = (Get-SECSecretValue -SecretId $OUSecretName).SecretString | ConvertFrom-Json
                          $domainJoinPassword = (ConvertTo-SecureString -String $($domain_pass_keypair."ADDomainJoinPassword") -AsPlainText -Force)


                      } Catch [System.Exception] {
                          Write-Output "Failed to get SSM Parameter(s) $_"
                      }

                      $domainCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName, $domainJoinPassword)

                      If (-not (Get-WindowsFeature -Name 'RSAT-AD-Tools' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'Installed')) {
                          Write-Output 'Installing RSAT AD Tools to allow domain joining'
                          Try {
                              $Null = Add-WindowsFeature -Name 'RSAT-AD-Tools' -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to install RSAT AD Tools $_"
                              Exit 1
                          }
                      }

                      $getADComputer = (Get-ADComputer -Identity $env:COMPUTERNAME -Credential $domainCredential)
                      $distinguishedName = $getADComputer.DistinguishedName

                      Try {

                          Remove-Computer -ComputerName $env:COMPUTERNAME -UnjoinDomainCredential $domainCredential -Verbose -Force -Restart:$false -ErrorAction Stop
                          Remove-ADComputer -Credential $domainCredential -Identity $distinguishedName -Server $domainName -Confirm:$False -Verbose -ErrorAction Stop

                      } Catch [System.Exception] {
                          Write-Output "Failed to remove $env:COMPUTERNAME from the $domainName domain and in a Windows Workgroup. $_"
                          Exit 1
                      }
                  } Else {
                      Write-Output "$env:COMPUTERNAME is not part of the Active Directory domain $domainName and already part of a Windows Workgroup."
                      Exit 0
                  }
              InstanceIds:
                - '{{InstanceId}}'
              DocumentName: AWS-RunPowerShellScript
            timeoutSeconds: 600
            nextStep: unjoinADEC2Tag
            isEnd: false
            onFailure: step:failADEC2Tag
          - name: unjoinADEC2Tag
            action: aws:createTags
            description: Update the ADJoined EC2 tag to reflect removal from AD domain.
            inputs:
              ResourceIds:
                - '{{InstanceId}}'
              ResourceType: EC2
              Tags:
                - Value: Unjoin-complete
                  Key: ADJoined
            timeoutSeconds: 30
            isEnd: false
            nextStep: rebootServer
          - name: failADEC2Tag
            action: aws:createTags
            description: Update the ADJoined EC2 tag to reflect a failure in the AD domain join/unjoin process.
            inputs:
              ResourceIds:
                - '{{InstanceId}}'
              ResourceType: EC2
              Tags:
                - Value: Failed
                  Key: ADJoined
            timeoutSeconds: 30
            isEnd: true

          - name: rebootServer
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: RebootInstances
              InstanceIds:
                - '{{InstanceId}}'
            isEnd: true
